type Query {
  nowPlaying(id: ID!): NowPlaying
  nowPlayingReactions(id: ID!): [NowPlayingReactionItem!]!
}

type Mutation {
  nowPlayingReact(id: ID!, reaction: String!): Boolean
  nowPlayingSkip(id: ID!, isBackward: Boolean!): Boolean
  nowPlayingPlayUid(id: ID!, uid: String!): Boolean
}

type Subscription {
  nowPlayingUpdated(id: ID!): NowPlaying
  nowPlayingReactionsUpdated(id: ID!): [NowPlayingReactionItem!]!
}

type NowPlayingQueueItem {
  uid: ID!
  trackId: String!
  creatorId: String!
  index: Int!
  playedAt: DateTime!
  endedAt: DateTime!
}

type NowPlaying {
  id: ID!
  current: NowPlayingQueueItem!
  next: [QueueItem!]!
}

type NowPlayingReactionItem {
  userId: String!
  user: User
  reaction: String!
}
